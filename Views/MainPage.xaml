using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace ConversorModedasMauiMvvm
{
    // ViewModel: é a “parte lógica” que conversa com a tela (XAML).
    // Ele guarda os dados (ex: moedas, valor digitado, resultado) e os comandos dos botões.
    public class MainViewModel : INotifyPropertyChanged
    {
        // Evento para avisar a tela quando alguma informação mudou
        public event PropertyChangedEventHandler PropertyChanged;

        // Lista de moedas disponíveis (vai aparecer no Picker da tela)
        public ObservableCollection<string> Currencies { get; } =
            new ObservableCollection<string> { "BRL", "USD", "EUR" };

        // Valor digitado pelo usuário (caixa de texto Entry).
        // É string porque a pessoa digita texto, mas depois a gente converte pra número.
        private string amountText;
        public string AmountText
        {
            get => amountText;
            set
            {
                amountText = value;
                OnPropertyChanged();
            }
        }

        // Moeda de origem (o "De" do Picker)
        private string from;
        public string From
        {
            get => from;
            set
            {
                from = value;
                OnPropertyChanged();
            }
        }

        // Moeda de destino (o "Para" do Picker)
        private string to;
        public string To
        {
            get => to;
            set
            {
                to = value;
                OnPropertyChanged();
            }
        }

        // Resultado da conversão (texto que aparece no final)
        private string resultText;
        public string ResultText
        {
            get => resultText;
            set
            {
                resultText = value;
                OnPropertyChanged();
            }
        }

        // Comando do botão "Converter"
        public ICommand ConvertCommand { get; }
        // Comando do botão "Limpar"
        public ICommand ClearCommand { get; }
        // Comando do botão "Inverter"
        public ICommand SwapCommand { get; }

        // Dicionário com as taxas de câmbio fixas (exemplo simples)
        private readonly Dictionary<(string From, string To), decimal> _rates =
            new Dictionary<(string, string), decimal>
            {
                { ("USD", "BRL"), 5.60m },
                { ("BRL", "USD"), 0.18m },
                { ("EUR", "BRL"), 6.00m },
                { ("BRL", "EUR"), 0.16m },
                { ("USD", "EUR"), 0.90m },
                { ("EUR", "USD"), 1.11m }
            };

        // Construtor: aqui configuramos os comandos dos botões
        public MainViewModel()
        {
            // Quando clicar em "Converter", chama a função Convert()
            ConvertCommand = new Command(Convert);

            // Quando clicar em "Limpar", chama a função Clear()
            ClearCommand = new Command(Clear);

            // Quando clicar em "Inverter", chama a função Swap()
            SwapCommand = new Command(Swap);
        }

        // Função que faz a conversão
        private void Convert()
        {
            // Tenta transformar o texto digitado em número
            if (decimal.TryParse(AmountText, out decimal amount) && 
                !string.IsNullOrEmpty(From) && 
                !string.IsNullOrEmpty(To))
            {
                // Procura a taxa de câmbio entre as moedas escolhidas
                if (_rates.TryGetValue((From, To), out decimal rate))
                {
                    // Faz a conta
                    decimal result = amount * rate;
                    // Mostra o resultado formatado
                    ResultText = $"{amount} {From} = {result:F2} {To}";
                }
                else
                {
                    // Caso não exista a taxa configurada
                    ResultText = "Conversão não disponível.";
                }
            }
            else
            {
                // Se digitou errado ou deixou algo vazio
                ResultText = "Valor ou moedas inválidas.";
            }
        }

        // Função que limpa os campos
        private void Clear()
        {
            AmountText = string.Empty;
            ResultText = string.Empty;
            From = null;
            To = null;
        }

        // Função que inverte as moedas
        private void Swap()
        {
            // Troca "De" com "Para"
            var temp = From;
            From = To;
            To = temp;
        }

        // Essa função avisa a tela que algo mudou,
        // para atualizar os textos automaticamente
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
